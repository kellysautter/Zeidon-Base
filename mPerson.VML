
/*************************************************************************************************
**
**    OPERATION: ActivateAllPersons
**
**
*************************************************************************************************/
TRANSFORMATION OPERATION
ActivateAllPersonList( VIEW mPerson BASED ON LOD mPerson,
                       VIEW ViewToWindow )

   ACTIVATE mPerson MULTIPLE

   OrderEntityForView( mPerson, "Person", "LastName A, FirstName A" )

END
/*************************************************************************************************
**
**    OPERATION: dPersonFullName
**
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dPersonFullNameFML( VIEW mPerson BASED ON LOD mPerson,
                    STRING ( 32 ) InternalEntityStructure,
                    STRING ( 32 ) InternalAttribStructure,
                    SHORT GetOrSetFlag )

   CASE GetOrSetFlag
      OF zDERIVED_GET:
      
         PersonName_FirstMiddleLast( mPerson, InternalEntityStructure, InternalAttribStructure, GetOrSetFlag )

      /* end zDERIVED_GET */
      OF zDERIVED_SET:

      /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: dPersonFullNameLFM
**
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dPersonFullNameLFM( VIEW mPerson BASED ON LOD mPerson,
                    STRING ( 32 ) InternalEntityStructure,
                    STRING ( 32 ) InternalAttribStructure,
                    SHORT GetOrSetFlag )

   CASE GetOrSetFlag
      OF zDERIVED_GET:
      
         PersonName_LastFirstMiddle( mPerson, InternalEntityStructure, InternalAttribStructure, GetOrSetFlag )

      /* end zDERIVED_GET */
      OF zDERIVED_SET:

      /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: dAddressLabelFull
**
**
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dAddressLabelFull( VIEW mPerson BASED ON LOD mPerson,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )
   SHORT nRC

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      nRC = dAdressLabelFull( mPerson /* vAnyObject */,
            InternalEntityStructure /* szInternalEntityStructure */,
            InternalAttribStructure /* szInternalAttribStructure */,
            GetOrSetFlag /* nGetOrSetFlag */ )
      RETURN nRC
        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dCityStateZipCountry
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dCityStateZipCountry( VIEW mPerson BASED ON LOD mPerson,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 60 ) szCityStateZipCountry
   STRING ( 20 ) szCountry

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
   
      szCountry = mPerson.PrimaryAddress.Country
      IF szCountry = "" OR szCountry = "US"
         szCityStateZipCountry = mPerson.PrimaryAddress.City + ", " +
                                 mPerson.PrimaryAddress.StateProvince + " " +
                                 mPerson.PrimaryAddress.PostalCode
                                 
      ELSE
         szCityStateZipCountry = mPerson.PrimaryAddress.City + ", " +
                                 mPerson.PrimaryAddress.StateProvince + " " +
                                 mPerson.PrimaryAddress.PostalCode + " " +
                                 szCountry
      END
   
      StoreStringInRecord ( mPerson,
                            InternalEntityStructure, InternalAttribStructure, szCityStateZipCountry )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**
**    OPERATION: ObjectConstraint
**
**
*************************************************************************************************/
OBJECT CONSTRAINT OPERATION
ObjectConstraint( VIEW mPerson BASED ON LOD mPerson,
                  SHORT Event,
                  SHORT State )

   VIEW mPerson2 BASED ON LOD  mPerson
   VIEW mPerson3 BASED ON LOD  mPerson
     VIEW sAppMgr  BASED ON LOD  sAppMgr
   VIEW mUser    BASED ON LOD  mUser
   STRING ( 1 ) szRole
   STRING (  32  ) szFunctionalArea
   INTEGER nRC 
   
   CASE Event
       OF   zOCE_ACTIVATE:
       
          IF State != 0
             // Return if this is not a regular Activate OI. (For example, an ActivateOI_FromOI)
             RETURN 0
          END
    
          CreateViewFromView( mPerson2, mPerson)
    
          // Relink PrimaryAddress with Address.
          IF mPerson2.PrimaryAddress EXISTS
             SET CURSOR FIRST mPerson2.Address WHERE mPerson2.Address.ID = mPerson2.PrimaryAddress.ID
             RelinkInstanceToInstance( mPerson2, "PrimaryAddress",
                                       mPerson2, "Address" )
             IF mPerson2.PrimaryForPerson EXISTS
                RelinkInstanceToInstance( mPerson2, "PrimaryForPerson",
                                          mPerson2, "Person" )
             END
          END
          
                  
                   nRC = GetViewByName( sAppMgr, "sAppMgr", mPerson, zLEVEL_TASK )
          IF nRC < 0
             // Use task view in case we're running under Web.
             nRC = GetViewByName( sAppMgr, "sAppMgr", mPerson, zLEVEL_TASK )
          END
                    DropView( mPerson2 )
          
                   
          /* end zOCE_ACTIVATE */
       OF   zOCE_ACTIVATE_EMPTY:

        /* end zOCE_ACTIVATE_EMPTY */
       OF   zOCE_COMMIT:
   
         IF mPerson.Person EXISTS
         
            // Set new modifed date/time.
            SetAttributeFromCurrentDateTime( mPerson, "Person", "ModifiedDateTime" )
         
            // If Address has changed, set Modified flag.
            CreateViewFromView( mPerson2, mPerson)
            FOR EACH mPerson2.Address  
               nRC = GetIncrementalUpdateFlags( mPerson2, "Address", zSET_INCR_UPDATED )
               IF nRC = 1
                  SetAttributeFromCurrentDateTime( mPerson2, "Address", "ModifiedDateTime" )
               END
            END
   
            
                     // If the Person is Deceased, make sure the ContactPreference attribute is set to "do not call" (N).
            IF mPerson.Person.Deceased = "Y"
               mPerson.Person.ContactPreference = "N"
            END
          
            // Create the Change Log entry.
            // For Prospects, create a blob of the before and after images of the object.
            // Drop any current Transaction entries (because we don't want past OI blobs taking up space in this OI blob)
            // and store a copy (blob) of the current OI in the new transaction entry.
            // Also create a copy of the original OI.
         
            // Always generate log entry.
            GenerateTransactionEntry( mPerson )
            
                    END
         
       /* end zOCE_COMMIT */
       OF   zOCE_DROPOI:

       /* end zOCE_DROPOI */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: IsPrimaryAddress
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
IsPrimaryAddress( VIEW mPerson BASED ON LOD mPerson,
                  STRING ( 32 ) InternalEntityStructure,
                  STRING ( 32 ) InternalAttribStructure,
                  SHORT GetOrSetFlag )

   CASE GetOrSetFlag
      OF zDERIVED_GET:
      
         IF mPerson.PrimaryForPerson  EXISTS  
            StoreStringInRecord ( mPerson,
                                  InternalEntityStructure, InternalAttribStructure, "Y" )
         ELSE 
            StoreStringInRecord ( mPerson,
                                  InternalEntityStructure, InternalAttribStructure, "" )
         END
         
        /* end zDERIVED_GET */
      OF zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END
/*************************************************************************************************
**    
**    OPERATION: dNameAndCityExist
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dNameAndCityExist( VIEW mPerson BASED ON LOD mPerson,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )
 VIEW mPerson2  BASED ON LOD mPerson
    STRING ( 1000 ) szMsg
     INTEGER nRC
     
   CASE GetOrSetFlag
   OF   zDERIVED_GET:
   IF mPerson.Person.ID = ""
      ACTIVATE mPerson2 WHERE mPerson2.Person.LastName     = mPerson.Person.LastName 
                          AND mPerson2.Person.FirstName    = mPerson.Person.FirstName 
                          AND mPerson2.PrimaryAddress.City = mPerson.PrimaryAddress.City 
                          
      IF RESULT >= 0
 StoreStringInRecord ( mPerson,
                                  InternalEntityStructure, InternalAttribStructure, "Y" )
      ELSE  StoreStringInRecord ( mPerson,
                                  InternalEntityStructure, InternalAttribStructure, "N" )
                                  END
      DropObjectInstance( mPerson2 )
ELSE
 StoreStringInRecord ( mPerson,
                                  InternalEntityStructure, InternalAttribStructure, "N" )
   END
   
        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */


END


/*************************************************************************************************
**    
**    OPERATION: ValidateDeletePerson
**    
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
ValidateDeletePerson( VIEW mPerson BASED ON LOD mPerson )

   STRING ( 1 ) szConstraintError

   // Validate that important information tied to the person does not exist.
        
   // Don't allow delete if the Person is still a Prospect, Student, Donor or Alumni.
   szConstraintError = ""
  
END

